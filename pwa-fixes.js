// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è PWA
document.addEventListener('DOMContentLoaded', function() {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º z-index –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    const today = document.querySelector('.calendar-day.today');
    if (today) {
        today.style.position = 'relative';
        today.style.zIndex = '100';
        today.style.boxShadow = 'inset 0 0 0 3px #007aff';
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–æ–≤
    fixVacationDisplay();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç–æ–≤
    addReportsButton();
});

function fixVacationDisplay() {
    // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—É—Å–∫–æ–≤
    setTimeout(() => {
        const vacationEvents = document.querySelectorAll('.event.vacation');
        vacationEvents.forEach(event => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—É—Å–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω—ã–µ –¥–Ω–∏
            const eventText = event.textContent;
            if (eventText.includes('–ö—É–∑–Ω–µ—Ü–æ–≤') && !shouldShowVacationOnDay(event)) {
                event.style.display = 'none';
            }
        });
    }, 1000);
}

function shouldShowVacationOnDay(eventElement) {
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –ª–∏ –æ—Ç–ø—É—Å–∫ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
    const parentDay = eventElement.closest('.calendar-day');
    if (!parentDay) return false;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
    const dayNumber = parentDay.querySelector('.day-number');
    if (!dayNumber) return false;
    
    const day = parseInt(dayNumber.textContent);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω—ã–µ –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6-13 –∏—é–ª—è)
    return day >= 6 && day <= 13;
}

function addReportsButton() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    const header = document.querySelector('.upcoming-events');
    if (header && currentUser && currentUser.role === 'manager') {
        const reportsBtn = document.createElement('button');
        reportsBtn.textContent = 'üìä –û—Ç—á–µ—Ç';
        reportsBtn.style.cssText = `
            position: absolute;
            top: 10px;
            right: 60px;
            background: #17a2b8;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            z-index: 1000;
        `;
        reportsBtn.onclick = generateQuickReport;
        header.style.position = 'relative';
        header.appendChild(reportsBtn);
    }
}

function generateQuickReport() {
    try {
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 7);
        
        const reportData = {
            period: `${formatDate(startDate)} - ${formatDate(endDate)}`,
            events: events.filter(e => {
                const eventDate = new Date(e.date || e.startDate);
                return eventDate >= startDate && eventDate <= endDate;
            }),
            teams: teams.length,
            employees: employees.length
        };
        
        // –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç
        let csvContent = '–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥,' + reportData.period + '\n\n';
        csvContent += '–î–∞—Ç–∞,–¢–∏–ø,–ë—Ä–∏–≥–∞–¥–∞/–°–æ—Ç—Ä—É–¥–Ω–∏–∫,–ê–¥—Ä–µ—Å\n';
        
        reportData.events.forEach(event => {
            const date = event.date || event.startDate;
            const type = getEventTypeName(event.type);
            const team = event.teamId ? getTeamName(event.teamId) : getEmployeeName(event.employeeId);
            const address = event.address || '–û—Ç–ø—É—Å–∫';
            
            csvContent += `${date},${type},${team},"${address}"\n`;
        });
        
        csvContent += '\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n';
        csvContent += `–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π,${reportData.events.length}\n`;
        csvContent += `–ë—Ä–∏–≥–∞–¥,${reportData.teams}\n`;
        csvContent += `–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤,${reportData.employees}\n`;
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloadCSV(csvContent, `–û—Ç—á–µ—Ç_${formatDate(new Date())}.csv`);
        
        showNotification('–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–∞—á–∞–Ω!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞', 'error');
    }
}

function downloadCSV(content, filename) {
    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}

function getEventTypeName(type) {
    const types = {
        'drilling': '–ë—É—Ä–µ–Ω–∏–µ',
        'installation': '–ú–æ–Ω—Ç–∞–∂', 
        'trip': '–ü–æ–µ–∑–¥–∫–∞',
        'vacation': '–û—Ç–ø—É—Å–∫'
    };
    return types[type] || type;
}

// –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function setupNotifications() {
    if ('Notification' in window && 'serviceWorker' in navigator) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        checkTomorrowEvents();
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å
        setInterval(checkTomorrowEvents, 60 * 60 * 1000);
    }
}

function checkTomorrowEvents() {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = formatDate(tomorrow);
    
    const tomorrowEvents = events.filter(e => e.date === tomorrowStr);
    
    if (tomorrowEvents.length > 0 && Notification.permission === 'granted') {
        const message = `–ó–∞–≤—Ç—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${tomorrowEvents.length} —Å–æ–±—ã—Ç–∏–π`;
        new Notification('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', {
            body: message,
            icon: '/icon-192.png',
            badge: '/icon-192.png'
        });
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
setupNotifications();
